server:
  port: 8091
  tomcat:
    max-threads: 10
spring:
  zipkin:
    base-url: http://127.0.0.1:9411/ #zipkin server的请求地址
    discovery-client-enabled: false #这里是让nacos把他当成一个URLC，而不是当作服务名
  sleuth:
    sampler:
      probability: 1.0 #采用的百分比 这里是测试 所示设置为百分之百  也就是所有的链路都会采样到
  application:
    name: service-order
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/shop?serverTimezone=UTC&useUnicode=true&characterEncodintg=utf-8&useSSL=false
    username: root
    password: root
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
    sentinel:
      transport:
        # 这里是指定跟控制台交流的端口（用于和sentinel控制台的交流 这里随意指定一个未使用的端口即可）
        port: 9999
        #下面这一行是指定sentinel控制台的运行地址
        dashboard: localhost:8089
      #在这里设置false 是为了关闭sentinel的CommonFilter的实例化  进行手动的实例化 这样才能使用前端网页配置的链路限流功能
      #在代码中添加一个配置类  自己构建CommonFilter实例
#      filter:
#        enabled: false

mybatis:
  mapper-locations: classpath:*.xml

#这里的service-product指的是调用的提供者的名称  这里是用来配置ribbon的负载均衡的策略
#service-product:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

#这里时在做sentinel规则持久化对应添加的配置
#开启feign对sentinel的支持
feign:
  sentinel:
    enabled: true

#配置rocketmq
rocketmq:
  name-server: 43.142.92.196:9876   #rocketMQ服务的地址
  producer:
    group: shop-order   #生产组